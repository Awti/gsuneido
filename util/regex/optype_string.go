// Code generated by "stringer -type=opType"; DO NOT EDIT.

package regex

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opChar-1]
	_ = x[opCharIgnoreCase-2]
	_ = x[opJump-3]
	_ = x[opSplitNext-4]
	_ = x[opSplitJump-5]
	_ = x[opAnyNotNL-6]
	_ = x[opHalfSet-7]
	_ = x[opFullSet-8]
	_ = x[opListSet-9]
	_ = x[opWordStart-10]
	_ = x[opWordEnd-11]
	_ = x[opLineStart-12]
	_ = x[opLineEnd-13]
	_ = x[opStrStart-14]
	_ = x[opStrEnd-15]
	_ = x[opSave-16]
	_ = x[opDoneSave1-17]
	_ = x[opOnePass-18]
	_ = x[opBranchNext-19]
	_ = x[opBranchJump-20]
	_ = x[opLiteralSubstr-21]
	_ = x[opLiteralPrefix-22]
	_ = x[opLiteralSuffix-23]
	_ = x[opLiteralEqual-24]
	_ = x[opPrefix-25]
}

const _opType_name = "opCharopCharIgnoreCaseopJumpopSplitNextopSplitJumpopAnyNotNLopHalfSetopFullSetopListSetopWordStartopWordEndopLineStartopLineEndopStrStartopStrEndopSaveopDoneSave1opOnePassopBranchNextopBranchJumpopLiteralSubstropLiteralPrefixopLiteralSuffixopLiteralEqualopPrefix"

var _opType_index = [...]uint16{0, 6, 22, 28, 39, 50, 60, 69, 78, 87, 98, 107, 118, 127, 137, 145, 151, 162, 171, 183, 195, 210, 225, 240, 254, 262}

func (i opType) String() string {
	i -= 1
	if i >= opType(len(_opType_index)-1) {
		return "opType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _opType_name[_opType_index[i]:_opType_index[i+1]]
}
