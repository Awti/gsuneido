// Copyright Suneido Software Corp. All rights reserved.
// Governed by the MIT license found in the LICENSE file.

package query

import "github.com/apmckinlay/gsuneido/runtime"

// ProjectNone produces a single empty row with no columns.
// It results from a Project with no columns.
// It is not generated by the query parser.
type ProjectNone struct {
	cache
	done bool
}

var _ Query = (*ProjectNone)(nil)

func (*ProjectNone) String() string {
	return "PROJECT-NONE"
}

func (pn *ProjectNone) Transform() Query {
	return pn
}

func (*ProjectNone) Columns() []string {
	return nil
}

func (*ProjectNone) Keys() [][]string {
	return [][]string{{}}
}

func (*ProjectNone) Indexes() [][]string {
	return [][]string{{}}
}

func (*ProjectNone) Nrows() int {
	return 1
}

func (*ProjectNone) rowSize() int {
	return 0
}

func (*ProjectNone) Ordering() []string {
	return nil
}

func (*ProjectNone) Fixed() []Fixed {
	return nil
}

func (*ProjectNone) Updateable() string {
	return "nothing"
}

func (*ProjectNone) SingleTable() bool {
	return true
}

func (*ProjectNone) SetTran(QueryTran) {
}

func (*ProjectNone) optimize(Mode, []string) (Cost, any) {
	return 0, nil
}

func (*ProjectNone) setApproach(Mode, []string, any, QueryTran) {
}

func (*ProjectNone) lookupCost() Cost {
	return 0
}

func (*ProjectNone) Lookup(*runtime.Thread, []string, []string) runtime.Row {
	return nil
}

func (*ProjectNone) Header() *runtime.Header {
	return runtime.SimpleHeader([]string{})
}

func (*ProjectNone) Output(*runtime.Thread, runtime.Record) {
	panic("can't Output to ProjectNone")
}

func (pn *ProjectNone) Get(*runtime.Thread, runtime.Dir) runtime.Row {
	if pn.done {
		return nil
	}
	pn.done = true
	return runtime.Row{runtime.DbRec{Record: runtime.Record("")}}
}

func (*ProjectNone) Rewind() {
}

func (*ProjectNone) Select([]string, []string) {
}
