// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

// Copyright Suneido Software Corp. All rights reserved.
// Governed by the MIT license found in the LICENSE file.

package meta

import (
	"math/bits"

	"github.com/apmckinlay/gsuneido/db19/stor"
	"github.com/apmckinlay/gsuneido/util/assert"
	"github.com/apmckinlay/gsuneido/util/cksum"
)

type SchemaHamt struct {
	root       *nodeSchema
	mutable    bool
	generation uint32 // if mutable, nodes with this generation are mutable
}

type nodeSchema struct {
	generation uint32
	bmVal      uint32
	bmPtr      uint32
	vals       []*Schema
	ptrs       []*nodeSchema
}

const bitsPerSchemaNode = 5
const maskSchema = 1<<bitsPerSchemaNode - 1

func (ht SchemaHamt) IsNil() bool {
	return ht.root == nil
}

func (ht SchemaHamt) Get(key string) (*Schema, bool) {
	it := ht.get(key)
	if it == nil {
		var zero *Schema
		return zero, false
	}
	return *it, true
}

func (ht SchemaHamt) get(key string) **Schema {
	nd := ht.root
	if nd == nil {
		return nil
	}
	hash := SchemaHash(key)
	for shift := 0; shift < 32; shift += bitsPerSchemaNode { // iterative
		bit := nd.bit(hash, shift)
		iv := bits.OnesCount32(nd.bmVal & (bit - 1))
		if (nd.bmVal & bit) != 0 {
			if SchemaKey(nd.vals[iv]) == key {
				return &nd.vals[iv]
			}
		}
		if (nd.bmPtr & bit) == 0 {
			return nil
		}
		ip := bits.OnesCount32(nd.bmPtr & (bit - 1))
		nd = nd.ptrs[ip]
	}
	// overflow node, linear search
	for i := range nd.vals {
		if SchemaKey(nd.vals[i]) == key {
			return &nd.vals[i]
		}
	}
	return nil // not found
}

func (*nodeSchema) bit(hash uint32, shift int) uint32 {
	return 1 << ((hash >> shift) & maskSchema)
}

//-------------------------------------------------------------------

func (ht SchemaHamt) Mutable() SchemaHamt {
	gen := ht.generation + 1
	nd := ht.root
	if nd == nil {
		nd = &nodeSchema{generation: gen}
	}
	nd = nd.dup()
	nd.generation = gen
	return SchemaHamt{root: nd, mutable: true, generation: gen}
}

func (ht SchemaHamt) Put(item *Schema) {
	if !ht.mutable {
		panic("can't modify an immutable Hamt")
	}
	key := SchemaKey(item)
	hash := SchemaHash(key)
	ht.root.with(ht.generation, item, key, hash, 0)
}

func (nd *nodeSchema) with(gen uint32, item *Schema, key string, hash uint32, shift int) *nodeSchema {
	// recursive
	if nd.generation != gen {
		// path copy on the way down the tree
		nd = nd.dup()
		nd.generation = gen // now mutable in this generation
	}
	if shift >= 32 {
		// overflow node
		for i := range nd.vals { // linear search
			if SchemaKey(nd.vals[i]) == key {
				nd.vals[i] = item // update if found
				return nd
			}
		}
		nd.vals = append(nd.vals, item) // not found, add it
		return nd
	}
	bit := nd.bit(hash, shift)
	iv := bits.OnesCount32(nd.bmVal & (bit - 1))
	if (nd.bmVal & bit) == 0 {
		// slot is empty, insert new value
		nd.bmVal |= bit
		var zero *Schema
		nd.vals = append(nd.vals, zero)
		copy(nd.vals[iv+1:], nd.vals[iv:])
		nd.vals[iv] = item
		return nd
	}
	if SchemaKey(nd.vals[iv]) == key {
		// already exists, update it
		nd.vals[iv] = item
		return nd
	}

	ip := bits.OnesCount32(nd.bmPtr & (bit - 1))
	if (nd.bmPtr & bit) != 0 {
		// recurse to child node
		nd.ptrs[ip] = nd.ptrs[ip].with(gen, item, key, hash, shift+bitsPerSchemaNode)
		return nd
	}
	// collision, push new value down to new child node
	child := &nodeSchema{generation: gen}
	child = child.with(gen, item, key, hash, shift+bitsPerSchemaNode)

	// point to new child node
	nd.ptrs = append(nd.ptrs, nil)
	copy(nd.ptrs[ip+1:], nd.ptrs[ip:])
	nd.ptrs[ip] = child
	nd.bmPtr |= bit

	return nd
}

func (nd *nodeSchema) dup() *nodeSchema {
	dup := *nd // shallow copy
	dup.vals = append(nd.vals[0:0:0], nd.vals...)
	dup.ptrs = append(nd.ptrs[0:0:0], nd.ptrs...)
	return &dup
}

func (ht SchemaHamt) Freeze() SchemaHamt {
	return SchemaHamt{root: ht.root, generation: ht.generation}
}

//-------------------------------------------------------------------

// Delete removes an item. It returns whether the item was found.
func (ht SchemaHamt) Delete(key string) bool {
	if !ht.mutable {
		panic("can't modify an immutable Hamt")
	}
	hash := SchemaHash(key)
	_, ok := ht.root.without(ht.generation, key, hash, 0)
	return ok
}

func (nd *nodeSchema) without(gen uint32, key string, hash uint32, shift int) (*nodeSchema, bool) {
	// recursive
	if nd.generation != gen {
		// path copy on the way down the tree
		nd = nd.dup()
		nd.generation = gen // now mutable in this generation
	}
	if shift >= 32 {
		// overflow node
		for i := range nd.vals { // linear search
			if SchemaKey(nd.vals[i]) == key {
				nd.vals[i] = nd.vals[len(nd.vals)-1]
				nd.vals = nd.vals[:len(nd.vals)-1]
				if len(nd.vals) == 0 { // node emptied
					nd = nil
				}
				return nd, true
			}
		}
		return nd, false
	}
	bit := nd.bit(hash, shift)
	iv := bits.OnesCount32(nd.bmVal & (bit - 1))
	if (nd.bmVal & bit) != 0 {
		if SchemaKey(nd.vals[iv]) == key {
			// found it
			if (nd.bmPtr & bit) == 0 { // no child
				nd.bmVal &^= bit
				nd.vals = append(nd.vals[:iv], nd.vals[iv+1:]...) // preserve order
				if nd.bmVal == 0 && nd.bmPtr == 0 {               // node emptied
					nd = nil
				}
			} else {
				// pull up child value
				ip := bits.OnesCount32(nd.bmPtr & (bit - 1))
				child, item := nd.ptrs[ip].pullUp(gen)
				nd.vals[iv] = item // replace the item
				if child != nil {
					nd.ptrs[ip] = child
				} else { // child emptied
					nd.bmPtr &^= bit
					nd.ptrs = append(nd.ptrs[:ip], nd.ptrs[ip+1:]...) // preserve order
				}
			}
			return nd, true
		}
	}
	if (nd.bmPtr & bit) == 0 {
		return nd, false
	}
	ip := bits.OnesCount32(nd.bmPtr & (bit - 1))
	child, ok := nd.ptrs[ip].without(gen, key, hash, shift+bitsPerSchemaNode) // RECURSE
	if child != nil {
		nd.ptrs[ip] = child
	} else { // child emptied
		nd.bmPtr &^= bit
		nd.ptrs = append(nd.ptrs[:ip], nd.ptrs[ip+1:]...) // preserve order
	}
	return nd, ok
}

func (nd *nodeSchema) pullUp(gen uint32) (*nodeSchema, *Schema) {
	// recursive
	if nd.generation != gen {
		// path copy on the way down the tree
		nd = nd.dup()
		nd.generation = gen // now mutable in this generation
	}
	if nd.bmPtr != 0 { // have children
		assert.That(nd.bmVal != 0)
		ip := len(nd.ptrs) - 1
		child, item := nd.ptrs[ip].pullUp(gen) // RECURSE
		if child != nil {
			nd.ptrs[ip] = child
		} else {
			nd.ptrs = nd.ptrs[:ip] // drop empty child node
			// clear highest one bit
			nd.bmPtr = nd.clearHighestOneBit(nd.bmPtr)
		}
		return nd, item
	}
	// no children
	iv := len(nd.vals) - 1
	item := nd.vals[iv]
	if iv == 0 { // last value in node
		return nil, item
	}
	nd.vals = nd.vals[:iv]
	if nd.bmVal != 0 { // not an overflow node
		// clear highest one bit
		nd.bmVal = nd.clearHighestOneBit(nd.bmVal)
	}
	return nd, item
}

func (*nodeSchema) clearHighestOneBit(n uint32) uint32 {
	return n &^ (1 << (31 - bits.LeadingZeros32(n)))
}

//-------------------------------------------------------------------

func (ht SchemaHamt) ForEach(fn func(*Schema)) {
	if ht.root != nil {
		ht.root.forEach(fn)
	}
}

func (nd *nodeSchema) forEach(fn func(*Schema)) {
	for i := range nd.vals {
		fn(nd.vals[i])
	}
	for _, p := range nd.ptrs {
		p.forEach(fn)
	}
}

//-------------------------------------------------------------------

func (ht SchemaHamt) Write(st *stor.Stor, prevOff uint64,
	filter func(it *Schema) bool) uint64 {
	size := 0
	ck := uint32(0)
	ht.ForEach(func(it *Schema) {
		if filter(it) {
			size += it.storSize()
		}
		if !it.isTomb() {
			ck += it.Cksum()
		}
	})
	if size == 0 {
		return 0
	}
	size += 3 + 5 + cksum.Len + 4
	off, buf := st.Alloc(size)
	w := stor.NewWriter(buf)
	w.Put3(size)
	w.Put5(prevOff)
	w.Put4(int(ck))
	ht.ForEach(func(it *Schema) {
		if filter(it) {
			it.Write(w)
		}
	})
	assert.That(w.Len() == size-cksum.Len)
	cksum.Update(buf)
	return off
}

func ReadSchemaChain(st *stor.Stor, off uint64) (SchemaHamt, []uint64) {
	offs := make([]uint64, 0, 8)
	ht := SchemaHamt{}.Mutable()
	tomb := make(map[string]struct{}, 16)
	offs = append(offs, off)
	var ck uint32
	off, ck = ht.read(st, off, tomb)
	for off != 0 {
		offs = append(offs, off)
		off, _ = ht.read(st, off, tomb)
	}
	ck2 := uint32(0)
	ht.ForEach(func(it *Schema) {
		ck2 += it.Cksum()
	})
	if ck != ck2 {
		panic("Schema checksum mismatch")
	}
	return ht.Freeze(), offs
}

func (ht SchemaHamt) read(st *stor.Stor, off uint64, tomb map[string]struct{}) (uint64, uint32) {
	initial := ht.IsNil() // optimization
	buf := st.Data(off)
	size := stor.NewReader(buf).Get3()
	cksum.MustCheck(buf[:size])
	r := stor.NewReader(buf[3 : size-cksum.Len])
	prevOff := r.Get5()
	ck := uint32(r.Get4())
	for r.Remaining() > 0 {
		it := ReadSchema(st, r)
		if initial || ht.get(SchemaKey(it)) == nil {
			// doesn't exist yet
			key := SchemaKey(it)
			if it.isTomb() {
				tomb[key] = struct{}{}
			} else if _, ok := tomb[key]; !ok {
				ht.Put(it)
			}
		}
	}
	return prevOff, ck
}
